/* 
 * This file is part of the RTBServer distribution (https://github.com/yoori/rtbserver).
 * RTBServer is DSP server that allow to bid (see RTB auction) targeted ad
 * via RTB protocols (OpenRTB, Google AdExchange, Yandex RTB)
 *
 * Copyright (c) 2014 Yuri Kuznecov <yuri.kuznecov@gmail.com>.
 * 
 * This program is free software: you can redistribute it and/or modify  
 * it under the terms of the GNU General Public License as published by  
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef REQUESTINFOSVCS_REQUESTINFOMANAGER_REQUESTINFOMANAGER_IDL
#define REQUESTINFOSVCS_REQUESTINFOMANAGER_REQUESTINFOMANAGER_IDL

#include <Commons/CorbaTypes.idl>

module AdServer
{
  module RequestInfoSvcs
  {
    typedef CORBACommons::OctSeq RequestProfile;
    typedef CORBACommons::OctSeq UserProfile;
    typedef CORBACommons::OctSeq PassbackProfile;

    /**
     *  RequestInfoManager
     */
    interface RequestInfoManager
    {
      exception ImplementationException
      {
        string description;
      };

      exception NotReady
      {
        string description;
      };

      boolean get_profile(
        in string request_id,
        out RequestProfile request_profile)
        raises(NotReady, ImplementationException);

      boolean get_passback_profile(
        in string request_id,
        out PassbackProfile passback_profile)
        raises(NotReady, ImplementationException);

      boolean get_user_campaign_reach_profile(
        in string user_id,
        out UserProfile user_profile)
        raises(NotReady, ImplementationException);

      boolean get_user_action_profile(
        in string user_id,
        out UserProfile user_profile)
        raises(NotReady, ImplementationException);

      boolean get_user_fraud_protection_profile(
        in string user_id,
        out UserProfile user_profile)
        raises(NotReady, ImplementationException);

      boolean get_user_site_reach_profile(
        in string user_id,
        out UserProfile user_profile)
        raises(NotReady, ImplementationException);

      boolean get_user_tag_request_group_profile(
        in string user_id,
        out UserProfile user_profile)
        raises(NotReady, ImplementationException);

      void clear_expired(in boolean synch);
    };
  }; // module RequestInfoSvcs
}; // module AdServer

#endif // REQUESTINFOSVCS_REQUESTINFOMANAGER_REQUESTINFOMANAGER_IDL
